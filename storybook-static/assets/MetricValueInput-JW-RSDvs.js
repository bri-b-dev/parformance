import{k as g,r as V,w as x,f as i,q as _,s as d,v as $,x as v,p as y}from"./vue.esm-bundler-BAM-3gvP.js";function N(n,a,e){const l=typeof e=="string"?Number(e):e;if(e===""||e==null||Number.isNaN(l))return`${a} wird benötigt`;if(!Number.isInteger(l))switch(n){case"score_vs_par":return`${a} muss eine ganze Zahl sein (z. B. -3, 0, 2)`;default:return`${a} muss eine ganze Zahl sein`}switch(n){case"streak":case"count_in_time":if(l<=0)return`${a} muss > 0 sein`;break;case"points_total":case"stations_cleared":case"corridor_hits":if(l<0)return`${a} muss ≥ 0 sein`;break}return null}function k(n,a){return N(n.metric.type,n.metric.unit,a)}const q={class:"field"},w={class:"row",style:{"align-items":"center"}},I=["min","max","aria-describedby","aria-invalid","disabled","value"],M={class:"chip","aria-hidden":"true"},B=["id"],z=g({__name:"MetricValueInput",props:{drill:{},modelValue:{},label:{},min:{},max:{},disabled:{type:Boolean}},emits:["update:modelValue"],setup(n,{emit:a}){const e=n,l=a,u=`metric-${Math.random().toString(36).slice(2)}`,s=V(e.modelValue??null);x(()=>e.modelValue,t=>{s.value=t??null});const b=i(()=>e.drill.metric.unit),p=i(()=>e.label??b.value),o=i(()=>typeof e.min=="number"?e.min:1),m=i(()=>e.max),c=i(()=>{const t=k(e.drill,s.value);if(t)return t;const r=s.value;return r==null?null:typeof o.value=="number"&&r<o.value?`${p.value} muss ≥ ${o.value} sein`:typeof m.value=="number"&&r>m.value?`${p.value} muss ≤ ${m.value} sein`:null});function h(t){const r=t.target,f=r.value===""?null:Number(r.value);s.value=f,l("update:modelValue",f)}return(t,r)=>(y(),_("div",q,[d("label",{class:"label",for:u},v(p.value),1),d("div",w,[d("input",{id:u,class:"input",type:"number",min:o.value??void 0,max:m.value??void 0,"aria-describedby":c.value?`${u}-error`:void 0,"aria-invalid":!!c.value,disabled:n.disabled,step:1,inputmode:"numeric",value:s.value??"",onInput:h,style:{flex:"1"}},null,40,I),d("span",M,v(b.value),1)]),c.value?(y(),_("p",{key:0,id:`${u}-error`,class:"text-sm text-red-600 mt-1",role:"status","aria-live":"polite"},v(c.value),9,B)):$("",!0)]))}});z.__docgenInfo={exportName:"default",displayName:"MetricValueInput",description:"",tags:{},props:[{name:"drill",required:!0,type:{name:"Drill"}},{name:"modelValue",required:!1,type:{name:"union",elements:[{name:"number"},{name:"null"}]}},{name:"label",required:!1,type:{name:"string"}},{name:"min",description:"Optional lower bound; defaults to 1 to ensure >0 as acceptance criterion",required:!1,type:{name:"number"}},{name:"max",description:"Optional upper bound",required:!1,type:{name:"number"}},{name:"disabled",description:"When true, the input is disabled",required:!1,type:{name:"boolean"}}],events:[{name:"update:modelValue",type:{names:["union"],elements:[{name:"number"},{name:"null"}]}}],sourceFiles:["/Users/brigittebohm/Workspace/golf/parformance/src/components/MetricValueInput.vue"]};export{z as _};
