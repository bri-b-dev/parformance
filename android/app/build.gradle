apply plugin: 'com.android.application'

android {
    namespace "com.bribdev.parformance"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.bribdev.parformance"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    signingConfigs {
      release {
      def propOrEnv = { k -> System.getenv(k) ?: (project.hasProperty(k) ? project.property(k) : null) }

      // 1) Base64 zuerst versuchen
      def ksBase64 = propOrEnv("ANDROID_KEYSTORE_BASE64")
      File resolvedKsFile = null
      if (ksBase64) {
        // Whitespace entfernen (falls mit Umbr√ºchen gespeichert) und ins buildDir schreiben
        def cleanB64 = ksBase64.replaceAll("\\s", "")
        def outDir = new File("${project.buildDir}/keystore")
        outDir.mkdirs()
        def outFile = new File(outDir, "upload-keystore.jks")
        outFile.bytes = cleanB64.decodeBase64()
        resolvedKsFile = outFile
        println "üîê Keystore aus ANDROID_KEYSTORE_BASE64 nach ${outFile} geschrieben"
      } else {
        // 2) Fallback: Pfad aus Env/Property oder lokaler Default
        def ksPath = propOrEnv("ANDROID_KEYSTORE_PATH") ?: "upload-keystore.jks"
        resolvedKsFile = file(ksPath)
        println "üîê Keystore per Pfad: ${resolvedKsFile}"
      }

      if (resolvedKsFile?.exists()) {
        storeFile resolvedKsFile
        storePassword propOrEnv("ANDROID_KEYSTORE_PASSWORD")
        keyAlias      propOrEnv("ANDROID_KEY_ALIAS")
        keyPassword   propOrEnv("ANDROID_KEY_PASSWORD")
      } else {
        println "‚ö†Ô∏è  Kein Keystore gefunden ‚Äì Release wird UNSIGNED gebaut."
      }
      }
    }
    buildTypes {
      release {
        signingConfig signingConfigs.release
        minifyEnabled true
        shrinkResources true
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
